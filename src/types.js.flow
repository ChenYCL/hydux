// @flow
import { type CmdType } from './cmd'

export type ActionState<State> = $Shape<State> | null | void

export type ActionCmdReturn<State, Actions> = [State, CmdType<Actions>]

export type NormalAction<D, S, A> = (...args: any[]) => ActionCmdReturn<S, A>

export type ActionReturn<State, Actions> = ActionState<State> | Promise<any> | ActionCmdReturn<State, Actions>

export type ActionType<Data, State, Actions> =
  (data: Data, ...args: any[]) =>
  | ActionReturn<State, Actions>
  | ((state: State, actions: Actions) => ActionReturn<State, Actions>)

export type UnknownArgsActionType<State, Actions> =
  (...args: any[]) =>
  | ActionReturn<State, Actions>
  | ((state: State, actions: Actions) => ActionReturn<State, Actions>)

/** The interface for actions (exposed when implementing actions).
 *
 * @memberOf [App]
 */
export type ActionsType<State, Actions> = {
  [string]: ActionType<any, State, Actions> | ActionsType<any, any>
}

export type AR<S, A> = ActionReturn<S, A>
export type ACR<S, A> = ActionCmdReturn<S, A>
